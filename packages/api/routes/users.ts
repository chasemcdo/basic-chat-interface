import { type NextFunction, type Request, type Response, Router } from 'express'
import { type Collection, type Document, MongoClient } from 'mongodb'
import env from '../utils/env'
import { BufferMemory } from 'langchain/memory'
import { FakeListLLM } from 'langchain/llms/fake'
import { ConversationChain } from 'langchain/chains'
import { MongoDBChatMessageHistory } from 'langchain/stores/message/mongodb'
import { getDefaultChatId } from '../utils/helper'

const router = Router()

const mongoCollection = async (): Promise<Collection<Document>> => {
  const client = new MongoClient(env.MONGODB_URI)
  await client.connect()
  const collection = client.db('langchain').collection('memory')
  return collection
}

router.get('/', async (req: Request, res: Response, next: NextFunction) => {
  const chatHistory = new MongoDBChatMessageHistory({
    collection: await mongoCollection(),
    sessionId: await getDefaultChatId()
  })

  const messages = (await chatHistory.getMessages()).map((message) => {
    return {
      message: message.content,
      type: message._getType()
    }
  })
  res.send(messages)
})

// Send Message
router.post('/', async (req: Request, res: Response, next: NextFunction) => {
  // Check if message param exists
  const { message } = req.body
  if (message === undefined || message === '') {
    res.status(400).send({
      message: 'The message param is required'
    })
    return
  }

  const memory = new BufferMemory({
    chatHistory: new MongoDBChatMessageHistory({
      collection: await mongoCollection(),
      sessionId: await getDefaultChatId()
    })
  })

  const llm = new FakeListLLM({
    responses: ['A message generated by our spectacular LLM!']
  })

  const chain = new ConversationChain({ llm, memory })

  const response = await chain.call({ input: message })

  res.send(response)
})

module.exports = router
